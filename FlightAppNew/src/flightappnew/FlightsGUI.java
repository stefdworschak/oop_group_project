/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package flightappnew;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Stefan
 */
public class FlightsGUI extends javax.swing.JFrame {
    
    FlightDate flightDate = new FlightDate();
    ArrayList<FlightDate> flightDateList;// = new ArrayList<>();
    ArrayList<StandardTicket> ticketList;
    String departure, destination, departureDate, returnDate, flightNo, flightNo2, routeNo, routeNo2;
    int numPassenger;
    double price;
    
    /**
     * Creates new form FligthsGUI
     */
    public FlightsGUI() {
        initComponents();
        
        departure ="";
        destination="";
        departureDate="";
        returnDate="";
        flightNo="";
        flightNo2="";
        routeNo="";
        routeNo2="";
        numPassenger=0;
        price=0.0;
        
        loadingLbl.setVisible(false);
        returnRd.setSelected(true);
        firstFlightPnl.setVisible(false);
        flyOutLbl.setVisible(false);
        secondFlightPnl.setVisible(false);
        flyInLbl.setVisible(false);
        ticketDetailsLbl.setVisible(false);
        numPassengerTxt.setVisible(false);
        numPassengerLbl.setVisible(false);
        standardRd.setVisible(false);
        flexRd.setVisible(false);
        businessRd.setVisible(false);
        addTicketsBtn.setVisible(false);
        //calculateCapacityBtn.setVisible(false);
        ticketList = new ArrayList<>();
        //System.out.println(firstFlightLst.isSelectionEmpty());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        flightTypeRdGrp = new javax.swing.ButtonGroup();
        ticketRdGrp = new javax.swing.ButtonGroup();
        departureLbl = new javax.swing.JLabel();
        departureCbo = new javax.swing.JComboBox<>();
        destinationLbl = new javax.swing.JLabel();
        destinationCbo = new javax.swing.JComboBox<>();
        departureDateLbl = new javax.swing.JLabel();
        departureDateChooser = new datechooser.beans.DateChooserCombo();
        returnDateLbl = new javax.swing.JLabel();
        returnDateChooser = new datechooser.beans.DateChooserCombo();
        returnRd = new javax.swing.JRadioButton();
        oneWayRd = new javax.swing.JRadioButton();
        searchFlightsBtn = new javax.swing.JButton();
        firstFlightPnl = new java.awt.Panel();
        firstFlightScr = new javax.swing.JScrollPane();
        firstFlightLst = new javax.swing.JList<>();
        secondFlightPnl = new java.awt.Panel();
        secondFlightScr = new javax.swing.JScrollPane();
        secondFlightLst = new javax.swing.JList<>();
        flyOutLbl = new javax.swing.JLabel();
        flyInLbl = new javax.swing.JLabel();
        loadingLbl = new javax.swing.JLabel();
        ticketDetailsLbl = new javax.swing.JLabel();
        numPassengerTxt = new javax.swing.JTextField();
        numPassengerLbl = new javax.swing.JLabel();
        standardRd = new javax.swing.JRadioButton();
        flexRd = new javax.swing.JRadioButton();
        businessRd = new javax.swing.JRadioButton();
        addTicketsBtn = new javax.swing.JButton();
        calculateCapacityBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        departureLbl.setText("Departure");
        getContentPane().add(departureLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 93, -1));

        departureCbo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "London", "Paris", "Rome", "Berlin", "Dublin" }));
        getContentPane().add(departureCbo, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 60, 100, -1));

        destinationLbl.setText("Destination");
        getContentPane().add(destinationLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 60, 84, -1));

        destinationCbo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Paris", "Rome", "Berlin", "Dublin", "London" }));
        getContentPane().add(destinationCbo, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 60, 100, -1));

        departureDateLbl.setText("Departure Date");
        getContentPane().add(departureDateLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 93, -1));
        getContentPane().add(departureDateChooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 100, 100, -1));

        returnDateLbl.setText("Return Date");
        getContentPane().add(returnDateLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 100, 84, -1));

        returnDateChooser.setWeekStyle(datechooser.view.WeekDaysStyle.FULL);
        getContentPane().add(returnDateChooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 100, 100, -1));

        flightTypeRdGrp.add(returnRd);
        returnRd.setText("Return");
        returnRd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnRdActionPerformed(evt);
            }
        });
        getContentPane().add(returnRd, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 20, -1, -1));

        flightTypeRdGrp.add(oneWayRd);
        oneWayRd.setText("One-Way");
        oneWayRd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oneWayRdActionPerformed(evt);
            }
        });
        getContentPane().add(oneWayRd, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 20, -1, -1));

        searchFlightsBtn.setText("Search Flights");
        searchFlightsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFlightsBtnActionPerformed(evt);
            }
        });
        getContentPane().add(searchFlightsBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 130, -1, -1));

        firstFlightLst.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        firstFlightLst.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                firstFlightLstFocusGained(evt);
            }
        });
        firstFlightScr.setViewportView(firstFlightLst);

        javax.swing.GroupLayout firstFlightPnlLayout = new javax.swing.GroupLayout(firstFlightPnl);
        firstFlightPnl.setLayout(firstFlightPnlLayout);
        firstFlightPnlLayout.setHorizontalGroup(
            firstFlightPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(firstFlightPnlLayout.createSequentialGroup()
                .addComponent(firstFlightScr, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                .addContainerGap())
        );
        firstFlightPnlLayout.setVerticalGroup(
            firstFlightPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, firstFlightPnlLayout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addComponent(firstFlightScr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getContentPane().add(firstFlightPnl, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, 200, 160));

        secondFlightLst.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        secondFlightScr.setViewportView(secondFlightLst);

        javax.swing.GroupLayout secondFlightPnlLayout = new javax.swing.GroupLayout(secondFlightPnl);
        secondFlightPnl.setLayout(secondFlightPnlLayout);
        secondFlightPnlLayout.setHorizontalGroup(
            secondFlightPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(secondFlightScr, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
        );
        secondFlightPnlLayout.setVerticalGroup(
            secondFlightPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, secondFlightPnlLayout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addComponent(secondFlightScr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getContentPane().add(secondFlightPnl, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 180, 190, 160));

        flyOutLbl.setText("Fly Out");
        getContentPane().add(flyOutLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, 190, 20));

        flyInLbl.setText("Fly In");
        getContentPane().add(flyInLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 160, 190, 20));

        loadingLbl.setText("Loading...");
        getContentPane().add(loadingLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 130, -1, 20));

        ticketDetailsLbl.setText("Ticket Details");
        getContentPane().add(ticketDetailsLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 360, -1, 20));

        numPassengerTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numPassengerTxtActionPerformed(evt);
            }
        });
        getContentPane().add(numPassengerTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 390, 90, -1));

        numPassengerLbl.setText("Num of Passengers");
        getContentPane().add(numPassengerLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 390, 120, 20));

        ticketRdGrp.add(standardRd);
        standardRd.setText("Standard");
        getContentPane().add(standardRd, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 420, -1, -1));

        ticketRdGrp.add(flexRd);
        flexRd.setText("Flex");
        getContentPane().add(flexRd, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 420, -1, -1));

        ticketRdGrp.add(businessRd);
        businessRd.setText("Business");
        getContentPane().add(businessRd, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 420, -1, -1));

        addTicketsBtn.setText("Book Tickets");
        addTicketsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTicketsBtnActionPerformed(evt);
            }
        });
        getContentPane().add(addTicketsBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 420, -1, -1));

        calculateCapacityBtn.setText("Calculate Capacity");
        calculateCapacityBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateCapacityBtnActionPerformed(evt);
            }
        });
        getContentPane().add(calculateCapacityBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 20, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchFlightsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFlightsBtnActionPerformed
        // TODO add your handling code here:
        //loadingLbl.setVisible(true);
        departure = departureCbo.getItemAt(departureCbo.getSelectedIndex());
        destination = destinationCbo.getItemAt(destinationCbo.getSelectedIndex());
        departureDate = departureDateChooser.getText();
        returnDate = returnDateChooser.getText();
        try {
            
            SimpleDateFormat dateSource = new SimpleDateFormat("dd/MM/yy");
            SimpleDateFormat dateDestination = new SimpleDateFormat("yyyy-MM-dd");
            String depDate = dateDestination.format(dateSource.parse(departureDate));
            String retDate = dateDestination.format(dateSource.parse(returnDate));
            
            File file = new File("flightDate.DAT");
            FileInputStream fs = new FileInputStream(file);
            ObjectInputStream os = new ObjectInputStream(fs);
            
            flightDateList = (ArrayList<FlightDate>) os.readObject();
            DefaultListModel model, model2;
            int firstCnt=0, secondCnt=0;
            model = new DefaultListModel();
            model2 = new DefaultListModel();
            
            for(int i = 0; i < flightDateList.size(); i++){
                if(flightDateList.get(i).getDate().equals(depDate)
                    && flightDateList.get(i).getDeparture().equals(departure)
                    && flightDateList.get(i).getDestination().equals(destination)
                ){
                    firstFlightPnl.setVisible(true);
                    flyOutLbl.setVisible(true);
                    System.out.println(flightDateList.get(i).printDetails());
                    model.addElement(flightDateList.get(i).getFlightNo()+" - (Route #"+flightDateList.get(i).getRouteNo()+")");
                    firstCnt++;
                    //firstFlightLst.setModel(model);
                    //JOptionPane.showMessageDialog(null, flightDateList.get(i).printDetails());
                    //
                    
                } else if(returnRd.isSelected()
                    && flightDateList.get(i).getDate().equals(retDate)
                    && flightDateList.get(i).getDeparture().equals(destination)
                    && flightDateList.get(i).getDestination().equals(departure)
                ){
                    secondFlightPnl.setVisible(true);
                    flyInLbl.setVisible(true);
                    System.out.println(flightDateList.get(i).printDetails());
                    model2.addElement(flightDateList.get(i).getFlightNo()+" - (Route #"+flightDateList.get(i).getRouteNo()+")");
                    secondCnt++;
                    //secondFlightLst.setModel(model2);
                } else if(!returnRd.isSelected()){
                    secondFlightPnl.setVisible(false);
                    flyInLbl.setVisible(false);
                }/*else {
                      if(i == 1){
                        System.out.println(flightDateList.get(i).getDate().equals(depDate));
                        System.out.println(dateDestination.format(depDate).toString());
                        System.out.println(flightDateList.get(i).getDate());
                      }
                    //System.out.println(flightDateList.get(i).printDetails());
                }*/
            } 
            if(firstCnt == 0) {model.addElement("No flights found.");}
            if(secondCnt == 0) {model2.addElement("No flights found.");}
            firstFlightLst.setModel(model);
            secondFlightLst.setModel(model2);
            //loadingLbl.setVisible(false);
            //System.out.println(dateDestination.format(depDate) + " " + dateDestination.format(retDate));
            //JOptionPane.showMessageDialog(null, "Departure Date: "+depDate.toString()+" ;Return Date: "+retDate.toString());
        } catch(ParseException e){
           System.out.println(e);
        } catch(FileNotFoundException ex) {
            System.out.println(ex);
        } catch(IOException exc){
            System.out.println(exc);
        } catch(ClassNotFoundException exce){
            System.out.println(exce);
        }
       //loadingLbl.setVisible(false);
        
    }//GEN-LAST:event_searchFlightsBtnActionPerformed

    private void returnRdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnRdActionPerformed
        // TODO add your handling code here:
        returnDateChooser.setVisible(true);
        returnDateLbl.setVisible(true);
    }//GEN-LAST:event_returnRdActionPerformed

    private void oneWayRdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oneWayRdActionPerformed
        // TODO add your handling code here:
        returnDateChooser.setVisible(false);
        returnDateLbl.setVisible(false);
    }//GEN-LAST:event_oneWayRdActionPerformed

    private void numPassengerTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numPassengerTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_numPassengerTxtActionPerformed

    private void addTicketsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTicketsBtnActionPerformed
        // TODO add your handling code here:
        if(returnRd.isSelected() && secondFlightLst.isSelectionEmpty()) {
            JOptionPane.showMessageDialog(null, "Please select a return flight or change to One Way!");
        } else if(!isNumber(numPassengerTxt.getText())){
            JOptionPane.showMessageDialog(null, "Please enter a valid number in the Num of Passenger field!");
        } else {
            
            flightNo = firstFlightLst.getSelectedValue();
            Pattern p2 = Pattern.compile("#([0-9]*)");
            Pattern p = Pattern.compile("^[A-Z]*[0-9]*");
            Matcher m = p.matcher(firstFlightLst.getSelectedValue());
            Matcher m3 = p2.matcher(firstFlightLst.getSelectedValue());
            
            while(m.find()){
                flightNo = m.group(0);
            }
            while(m3.find()){
                routeNo = m3.group(0);
            }

            numPassenger = Integer.parseInt(numPassengerTxt.getText());
            if(returnRd.isSelected()) {
                
                Matcher m2 = p.matcher(secondFlightLst.getSelectedValue());
                Matcher m4 = p2.matcher(secondFlightLst.getSelectedValue());
                flightNo2 = secondFlightLst.getSelectedValue();
                while(m2.find()){
                    flightNo2 = m2.group(0);
                }
                while(m4.find()){
                    routeNo2 = m4.group(0);
                }
                
                if(standardRd.isSelected()) {
                     
                    price = 50.0;
                    StandardTicket standard,standard2; 
                    standard = new StandardTicket(flightNo,routeNo, numPassenger, price);
                    standard2 = new StandardTicket(flightNo2,routeNo2, numPassenger, price);  
                    ticketList.add(standard);
                    ticketList.add(standard2);

                } else if(flexRd.isSelected()){
                    
                    price = 75.0;
                    FlexTicket flex, flex2; 
                    flex = new FlexTicket(flightNo, routeNo, numPassenger, price, true, true);
                    flex2 = new FlexTicket(flightNo2, routeNo2, numPassenger, price, true, true);  
                    ticketList.add(flex);
                    ticketList.add(flex2);
                    
                } else {
                    
                    price = 100.0;
                    BusinessTicket business, business2; 
                    business = new BusinessTicket(flightNo, routeNo, numPassenger, price, true, true);
                    business2 = new BusinessTicket(flightNo2, routeNo2, numPassenger, price, true, true);  
                    ticketList.add(business);
                    ticketList.add(business2);
                    
                }
            } else {
            
                if(standardRd.isSelected()) {

                    price = 50.0;
                    StandardTicket standard; 
                    standard = new StandardTicket(flightNo, routeNo, numPassenger, price); 
                    ticketList.add(standard);

                } else if(flexRd.isSelected()){

                    price = 75.0;
                    FlexTicket flex;
                    flex = new FlexTicket(flightNo, routeNo, numPassenger, price, true, true);
                    ticketList.add(flex);
                    
                } else {

                    price = 100.0;
                    BusinessTicket business; 
                    business = new BusinessTicket(flightNo, routeNo, numPassenger, price, true, true);
                    ticketList.add(business);
                    
                }
                
            }
                    
            try {
                File file = new File("tickets.DAT");
                FileOutputStream fStream = new FileOutputStream(file);
                ObjectOutputStream oStream = new ObjectOutputStream(fStream);

                oStream.writeObject(ticketList);
                JOptionPane.showMessageDialog(null, "Saved Successfully!");
            } catch(FileNotFoundException e){
                JOptionPane.showMessageDialog(null, "File Not Found!");
            } catch(IOException ex) {
                JOptionPane.showMessageDialog(null, "An unexpected error orccurred trying to write to the file.");
            }
            
           
           
        }
        
    }//GEN-LAST:event_addTicketsBtnActionPerformed

    private void firstFlightLstFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_firstFlightLstFocusGained
        // TODO add your handling code here:
        //System.out.println(firstFlightLst.isSelectionEmpty());
        ticketDetailsLbl.setVisible(true);
        numPassengerTxt.setVisible(true);
        numPassengerLbl.setVisible(true);
        standardRd.setVisible(true);
        flexRd.setVisible(true);
        businessRd.setVisible(true);
        addTicketsBtn.setVisible(true);
        calculateCapacityBtn.setVisible(true);
        standardRd.setSelected(true);
        
    }//GEN-LAST:event_firstFlightLstFocusGained

    private void calculateCapacityBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateCapacityBtnActionPerformed
        // TODO add your handling code here:       
        
        //try clause to catch any errors from the file handling
        try {
            //Standard Object/FileInputStream handling
            //Declare and assign our file 
            File file = new File("tickets.DAT");
            //Declare our FileInputStream and pass in our file
            FileInputStream fStream = new FileInputStream(file);
            //Declare our ObjectInputStream and pass in the FileInputStream
            ObjectInputStream oStream = new ObjectInputStream(fStream);
            
            //Read the object from the object stream, explicitly cast it as Arraylist 
            //of type StandardTicket and store it in our ticketList variable
            ticketList = (ArrayList<StandardTicket>) oStream.readObject();
            //Declare & assign a new Routes Class
            Routes routes = new Routes();
            
            //Loop through our ArrayList to sum tickets per flight number
            for(int i = 0; i < ticketList.size(); i++){
                
                //Check if returned Object from ArrayList is of the BusinessTicket class
                if(ticketList.get(i) instanceof BusinessTicket) {
                    
                    //Store the object at index i from the ticketList ArrayList in a new BusinessTicket instance
                    //and explicitly cast it as type BusinessTicket
                    BusinessTicket bs = (BusinessTicket) ticketList.get(i);
                    //Set flightNo in routes
                    routes.setFlightNo(bs.getFlightNo());
                    //Set ticket_type in routes
                    routes.setTicketType("Business Ticket");
                    //Set numPassenger in routes
                    routes.setNumPassenger(bs.getPassengerCount());
                    //Set price in routes
                    routes.setPrice(bs.getPrice());
                    //call the addTicket() method in the routes class to add the ticket the Object's attributes
                    routes.addTicket();
                } else if(ticketList.get(i) instanceof FlexTicket) {
                    //Same as BusinessTicket just with FlexTicket
                    FlexTicket fx = (FlexTicket) ticketList.get(i);
                    routes.setFlightNo(fx.getFlightNo());
                    routes.setTicketType("Flex Ticket");
                    routes.setNumPassenger(fx.getPassengerCount());
                    routes.setPrice(fx.getPrice());
                    routes.addTicket();
                } else if(ticketList.get(i) instanceof StandardTicket) {
                    //Same as BusinessTicket just with StandardTicket
                    StandardTicket st = (StandardTicket) ticketList.get(i);
                    routes.setFlightNo(st.getFlightNo());
                    routes.setTicketType("Standard Ticket");
                    routes.setNumPassenger(st.getPassengerCount());
                    routes.setPrice(st.getPrice());
                    routes.addTicket();
                }
            }
            //Display overall Staffing Requirements with JOptioPane
            JOptionPane.showMessageDialog(null, routes.printDetails());
        
        //Catch FileNotFoundException in case the flights.DAT file is missing
        } catch(FileNotFoundException e){
            //Print out the error message
            JOptionPane.showMessageDialog(null, "File Not Found!");
        //Catch IOException in case the flights.DAT is corrupted or cannot be read
        } catch(IOException ex) {
            JOptionPane.showMessageDialog(null, "An unexpected error orccurred trying to load to the file.");
        //Catch ClassNotFoundException in case the content of the flights.DAT file is not of type ArrayList<StandardTicket>
        } catch(ClassNotFoundException exe) {
            JOptionPane.showMessageDialog(null, "An unexpected error orccurred trying to load to the specified class.");
        }
        
    }//GEN-LAST:event_calculateCapacityBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FlightsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FlightsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FlightsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FlightsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FlightsGUI().setVisible(true);
            }
        });
    }
    
    private static Boolean isNumber(String var){
        
        int number;
        
        try{
            number = Integer.parseInt(var);
            if(number <= 0) {
                return false;
            } else {
                return true;
            }
        } catch(Exception e){
            return false;
        }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addTicketsBtn;
    private javax.swing.JRadioButton businessRd;
    private javax.swing.JButton calculateCapacityBtn;
    private javax.swing.JComboBox<String> departureCbo;
    private datechooser.beans.DateChooserCombo departureDateChooser;
    private javax.swing.JLabel departureDateLbl;
    private javax.swing.JLabel departureLbl;
    private javax.swing.JComboBox<String> destinationCbo;
    private javax.swing.JLabel destinationLbl;
    private javax.swing.JList<String> firstFlightLst;
    private java.awt.Panel firstFlightPnl;
    private javax.swing.JScrollPane firstFlightScr;
    private javax.swing.JRadioButton flexRd;
    private javax.swing.ButtonGroup flightTypeRdGrp;
    private javax.swing.JLabel flyInLbl;
    private javax.swing.JLabel flyOutLbl;
    private javax.swing.JLabel loadingLbl;
    private javax.swing.JLabel numPassengerLbl;
    private javax.swing.JTextField numPassengerTxt;
    private javax.swing.JRadioButton oneWayRd;
    private datechooser.beans.DateChooserCombo returnDateChooser;
    private javax.swing.JLabel returnDateLbl;
    private javax.swing.JRadioButton returnRd;
    private javax.swing.JButton searchFlightsBtn;
    private javax.swing.JList<String> secondFlightLst;
    private java.awt.Panel secondFlightPnl;
    private javax.swing.JScrollPane secondFlightScr;
    private javax.swing.JRadioButton standardRd;
    private javax.swing.JLabel ticketDetailsLbl;
    private javax.swing.ButtonGroup ticketRdGrp;
    // End of variables declaration//GEN-END:variables
}
